Name: YiHsun Lee
Student Number: 129713202
Email: ylee212@myseneca.ca
Date: July/29/2021


        In milestone 1 I created Utilities and Station modules. Utilities class is to read and parse the input files so that the extracted information can be used to set up and configure the assembly line. The hardest function I had to create was the extractToken() as it is more complicated than the reading files function I have ever created. This function requires me to fully understand how to manipulate the predefined functions, such as find(), substr() and length() inside the string library. I also learned how to use string::npos to determine if the boolean variable, more, is true or false. The station module is relatively straightforward, this module defines a single station on the assembly line where each station handles a specific item for filling customer orders.  
        In milestone 2 I only need to create CustomerOrder module. The purpose of this module is to design the functionality for processing customer orders as they move from one station to another along the assembly line. A CustomerOrder object can manage a single order on the assembly line and contains a struct, Item. In order to achieve the desired functionality, this module implemented the rule of five, meaning I had to create a default constructor, a copy constructor, a copy assignment operator, a move constructor, a move assignment operator and a destructor. However, in the CustomerOrder Class, a CustomerOrder object does not allow any copy operations, so for the copy constructor, I throw an error notifying that the copy operator is not allowed and set the copy assignment to delete to disable the copy operation. In the CustomerOrder class, the only resource I have to manage is a dynamically allocated array of pointers that point to a dynamically allocated object of type Item.
	In milestone 3 I created Workstation and LineManager modules. The Workstation module has three global deques of CustomerOrder Class and the Workstation class that hold the orders at either end of the assembly line. The Workstation class is inherited from the Station class that defines the structure of an active station on the assembly line and can fill the customer orders with station items. Though the rule of five is also applied here in Workstation class, since a Workstation object represents a single location on the assembly line for filling customer orders with items, the object cannot be copied or moved, so move and copy abilities are set to delete in Workstation class. This is the first time I had to work with deque, however, it is not that different from vector or list except that deque is a double-ended queue that can change in size from either end and have elements ordered in sequence. 
	I think the hardest part of the Workstation class was to figure out how to structure attempToMove(). It took me days to figure out why my incomplete deque is empty. Turned out incomplete deque will not be updated when there’s no enough stock. Incomplete deque needs to be checked inside the first if block whether the item has been filled, the instruction said if there’s no more next station, then the order will go into complete deque, however, when there’s no more next station, we sill need to check if the order is filled, if it’s not, then this order will go into the incomplete deque. If there’s no other check here, nothing will be stored in the incomplete deque even when the stock is 0.   
	For LineManager module, the LineManager class manages an assembly line of active stations. I found it challenging to create the two arguments LineManager constructor, since not only I had to utilize query class templates functions from the algorithm library, but I also had to use STL library to perform iteration. Moreover, it is designed in a way that the function reads the rext file to find the position of the same words in the container, then organize the words by its position.  The run() caused some confusion for me as well, because at one point, I ran into a bug where it wouldn’t display “Unable to fill” on my output, but once I fixed the attempToMove() in Workstation class, this bug went away.
	In conclusion, I think this milestone ties what I have learned in OOP345, I was able to implement the rule of five, the container, STL library, error handling, lambda function, file streams, and static variables. By no means the project was easy, the last milestone was especially challenging and took me few times to understand how the whole program works.
